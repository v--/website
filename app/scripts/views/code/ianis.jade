<h2 id="ianis.jsasetofusefuljavascriptextensionmethods"><strong>ianis.js</strong> a set of useful javascript extension methods</h2>

<p>This page shows only some that shorthands ianis.js provides.</p>

<p>There are many methods besides these. For the full documentation, see <a href="https://github.com/v--/ianis.js">GitHub</a></p>

<p>To run the test suite in your browser, go <a href="/ianis.js">here</a></p>

<p><strong>Method binding</strong></p>

<pre><code class="javascript">object.nestedObject.method.bind(object.nestedObject);

// Becomes

object.nestedObject.binded('method');
</code></pre>

<p><strong>Check if all elements in an array are functions</strong></p>

<pre><code class="javascript">[Object, Function, Number]
.map(function(current) {return typeof current === 'function'})
.reduce(function(prev, current) {return prev === current});

// Becomes

[Object, Function, Number].isTypeMonotone('function');
// or even
[Object, Function, Number].isTypeMonotone();
</code></pre>

<p><strong>Check if an array is polymorphic</strong></p>

<pre><code class="javascript">// Assume Apple inherits Fruit and apple and fruit are their instances

[fruit, apple]
.map(function(current) {return current instanceof Fruit})
.reduce(function(prev, current) {return prev === current});

// Becomes

[fruit, apple].isTypeMonotone(Fruit, true);
</code></pre>

<p><strong>Check if all elements in an array are equal</strong></p>

<pre><code class="javascript">['a', 'a', 'a']
.map(function(current, index, array) {return current === array[0]})
.reduce(function(prev, current) {return prev === current});

// Becomes

['a', 'a', 'a'].isMonotone();
</code></pre>
