:marked
    ### Description:

    #### Controls

    Space toggles the game start/pause mode. Left/right buttons move the bar.

    #### Details

div.block-description-container
    div.block-description.breakout-block-1 Weak organism
    div.block-description.breakout-block-2 Normal organism
    div.block-description.breakout-block-3 Strong organism

:marked
    This breakout clone is based on a stochastic cellular automaton simulation.

    The goal is to 'clear' the level by eliminating all organisms (non-empty cells) from the scene. Different organisms have different levels. When hit, an organism is either brought to a lower level or, if it's level is 1, eliminated. At random, the game either brings organisms to a higher level or spawns new ones next to old ones.

    The upper part of the bottom bar is an ellipse. It's reflection angle is actually that of a circle with a diameter the width of the bar, because otherwise the resulting angles are very acute.

    There are currently 3 levels of organisms. Every three seconds a random cell is selected and 'upgraded' according to the rules bellow:

    * If the selected cell is empty, put a level 1 (weak) organism in it.
    * If the selected cell has a living organism, boost it's level.
    * If the selected cell has a living organism and it's level is maximal, do nothing.

    Initially, there are 5 level 3 (strong) organisms, randomly distributed in the upper half of the level.

    #### Initial organism distribution

    The task is to obtain random 2D positions in a square lattice structure.

    My approach here is to create a simple RNG that generates symmetric, mean-weighted random variables and use such variables for finding both coordinates for each initial organism position. In other words, each initial position is a 2D random variable whose coordinates are independently distributed. The simplest approach would be to apply the embedded uniform JavaScript RNG to the quantile function (the inverse of the cumulative density function) of a continuous random variable. To ensure integer values, the result can be rounded.

    Let X be a [Laplace-distributed](https://en.wikipedia.org/wiki/Laplace_distribution) random variable (this is the most mean-weighted of all popular distributions). Because we want a simple RNG and JavaScript provides a uniform one, we need to find the quantile function so that it can be passed values from the JavaScript RNG. Since it's PDF has infinite support, in addition to rounding it's result should be bounded (in this case - hard-limited).

:katex
    \text{Let } X \in \text{Laplace}(\mu, \sigma), \; \mu \in \mathbb{R}, \; \sigma \in (0, \infty].

:katex
    \text{The CDF for X, } F_X(x) =

    \begin{cases}
        \dfrac 1 2 \exp \left(\dfrac {x - \mu} \sigma \right), \; x < \mu \\
        1 - \dfrac 1 2 \exp \left(- \dfrac {x - \mu} \sigma \right), \; x \geq \mu
    \end{cases},

:katex
    F_X^{-1}(x) =

    \begin{cases}
        \mu + \sigma \ln (2 x), \; x < \dfrac 1 2 \\
        \mu - \sigma \ln (2 (1 - x)), \; x \geq \dfrac 1 2
    \end{cases}.

:katex
    \text{Then, define the bounded continuous RNG as:}

:katex
    \min (\mu + \sigma, \max (\mu - \sigma, F_X^{-1}(Y))), Y \in U(0, 1).

:marked
    #### Subsequent randomization
    On each 'turn', a (uniformly) random organism is chosen uniformly from the live ones.

p
    span Let&nbsp;

    :katex(nowrap=true, displayMode=false)
        O_i, O_j

    span &nbsp;be the coordinates of the organism's cell and let&nbsp;

    :katex(nowrap=true, displayMode=false)
        m, n

    span &nbsp;be the height and width of the grid. Next, a new cell is selected by using the above RNG on the interval:

    :katex
        \overline{\max(1, O_i - 1), \min(m, O_i + 1)} \times \overline{\max(1, O_j - 1), \min(n, O_j + 1)}.

    span This newly selected cell is then manipulated as described above.
